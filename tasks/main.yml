---
# tasks file for cyhy_core

#
# Grab the cyhy-core code
#
- name: Create the /var/local/cyhy/core directory
  file:
    path: /var/local/cyhy/core
    state: directory

- name: Download and untar the cyhy-core tarball
  unarchive:
    src: "https://api.github.com/repos/jsf9k/cyhy-core/tarball/develop?\
    access_token={{ github_oauth_token }}"
    dest: /var/local/cyhy/core
    remote_src: yes
    extra_opts:
      - "--strip-components=1"

#
# Install cyhy-core
#
- name: Install cyhy-core
  pip:
    name: file:///var/local/cyhy/core

#
# Download and extract the MaxMind GeoIP database.
# If no license is found we will fallback on the license free version also
# offered by MaxMind.
#
- name: Set the local database file to use
  set_fact:
    local_db_file: "{{ (geoip_license_key) | \
    ternary('GeoIP2-City.tar.gz', 'GeoLite2-City.tar.gz') }}"

- name: Set the remote database URL
  set_fact:
    remote_db_url: "{{ (geoip_license_key) | ternary(\
    'https://download.maxmind.com/app/geoip_download?edition_id=GeoIP2-City\
    &license_key=' + geoip_license_key + '&suffix=tar.gz', \
    'https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz'\
    ) }}"

- name: Set the remote checksum URL
  set_fact:
    remote_checksum_url: "{{ (geoip_license_key) | ternary(\
    'https://download.maxmind.com/app/geoip_download?edition_id=GeoIP2-City\
    &license_key=' + geoip_license_key + '&suffix=tar.gz.md5',\
    'https://geolite.maxmind.com/download/geoip/database/\
    GeoLite2-City.tar.gz.md5' ) }}"

- name: Retrieve the checksum of the latest remote version of the database
  set_fact:
    latest_version_checksum: "{{ lookup('url', '{{ remote_checksum_url }}') }}"

- name: Create the /usr/local/share/GeoIP/ directory
  file:
    path: /usr/local/share/GeoIP/
    state: directory

- name: Check if the downloaded tar.gz file exists
  stat:
    path: "/usr/local/share/GeoIP/{{ local_db_file }}"
    checksum_algorithm: md5
  register: tarball

- name: Check to see if the remote version is different from the local version
  set_fact:
    get_update: "{{ True if (not tarball.stat.exists or \
    tarball.stat.checksum != latest_version_checksum) else False }}"

- name: Download, verify, and extract the latest database version if needed
  block:
    - name: Get GeoIP database and check (md5)
      get_url:
        url: "{{ remote_db_url }}"
        dest: "/usr/local/share/GeoIP/{{ local_db_file }}"
        checksum: "md5:{{ latest_version_checksum }}"
    - name: Extract GeoIP database
      unarchive:
        src: "/usr/local/share/GeoIP/{{ local_db_file }}"
        dest: /usr/local/share/GeoIP/
        remote_src: yes
        extra_opts:
          - "--strip-components=1"
  when: get_update
